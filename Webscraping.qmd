---
title: "Webscraping"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
library(readr)
library(tidyverse)
library(stringr)
library(dplyr)
library(tmap)
library(ggmap)
library(sf)
# sample for reading in data that we scraped using Octoparse. 
shoreview_rentals <- read_csv("Shoreview_rentals.csv")
shoreview_buy <- read_csv("Shoreview_buy.csv")
riverside_rentals <- read_csv("Riverside_rentals.csv")
riverside_buy <- read_csv("Riverside_buy.csv")
```

```{r}
# clean the FUCK outta shoreview_buy
shoreview_buy <- shoreview_buy %>%
  rename("bedrooms" = "bedroom_s_",
         "bathrooms" = "bathroom_s_",
         ) %>%
  mutate(type = case_when(
    str_detect(status, "[Tt]ownhouse") ~ "Townhouse",
    str_detect(status, "[Hh]ouse") ~ "House",
    str_detect(status, "[Cc]ondo") ~ "Condo",
    str_detect(status, "\\b([Ll]and|[Ll]ot|[Nn]ew)|[Cc]oming\\b") ~ "Misc")) %>%
  mutate(status = "buy",
         price = parse_number(price),
         price = price / 1000) %>%
  select(price, bedrooms, bathrooms, square_feet, status, address, type)

# clean the FUCK outta shoreview_rentals
shoreview_rentals <- shoreview_rentals %>%
  rename("bedrooms" = "bedroom_s_",
         "bathrooms" = "bathroom_s_",
         ) %>%
  mutate(type = case_when(
    str_detect(status, "[Tt]ownhouse") ~ "Townhouse rental",
    str_detect(status, "[Hh]ouse") ~ "House rental"))  %>%
  mutate(type = case_when(
    is.na(type) ~ "Apartment",
    TRUE ~ type
  )) %>%
  mutate(status = "rental",
         price = parse_number(price)) %>%
  select(price, bedrooms, bathrooms, square_feet, status, address, type)

# clean the FUCK outta riverside_buy 
riverside_buy <- riverside_buy %>%
  rename("bedrooms" = "bedroom_s_",
         "bathrooms" = "bathroom_s_",
         ) %>%
  mutate(price = parse_number(price)) %>%
  select(price, bedrooms, bathrooms, square_feet, status, address)

# clean the FUCK outta riverside_rentals 
riverside_rentals <- riverside_rentals %>%
  rename("bedrooms" = "bedroom_s_",
         "bathrooms" = "bathroom_s_",
         ) %>%
  mutate(price = parse_number(price)) %>%
  mutate(type = "Apartment",
         status = "rental") %>%
  select(price, bedrooms, bathrooms, square_feet, status, address, type)

shoreview_full <- rbind(shoreview_buy, shoreview_rentals)
```

```{r}
shoreview_small <- shoreview_full %>%
  drop_na()

addresses <- shoreview_full %>%
  drop_na() %>%
  select(address)

register_google(key = "AIzaSyA-CZDgJkk_zG_ULCoS-PosYIQF_ZzwQPs")

coords <- geocode(addresses$address)

shoreview_coords <- bind_cols(shoreview_small, coords)

shoreview_sf <- st_read("Shapefiles/shoreviewShape.gpkg")

test_sf <- st_as_sf(shoreview_coords, coords = c("lon", "lat"), crs = 4326)
test_sf <- st_transform(test_sf, 3857)  

# COLOR SHOWS PRICE 
tm_shape(shoreview_sf) + # plots Shoreview border
  tm_borders(col = "black", lwd = 1.5) +
tm_shape(test_sf) +
  tm_dots(col = "price", size = 0.75, palette = "-viridis", title = "Price in Thousands") +
tm_layout(
  legend.text.fontface = 3, 
  legend.frame = FALSE,
  legend.outside = TRUE,
  legend.outside.size = 0.6,
  legend.outside.position = "left",
  frame = FALSE 
)

# SIZE SHOWS PRICE
tm_shape(shoreview_sf) + 
  tm_borders(col = "black", lwd = 1.5) +  # plots Shoreview border
tm_shape(test_sf) +
  tm_dots(size = "price", title.siz = "Price in Thousands - Buy", col = "skyblue") +  # Change legend title
tm_layout(
  frame = FALSE,
  legend.width = 3,
  legend.position = c(-1,0.25)
)
```

# testing better mapping function with geom_sf. 

```{r}
library(ggspatial)

test_sf %>%
  filter(status == "rental") %>%
  ggplot() +
  annotation_map_tile(type = "osm", zoomin = 0, progress = "none") +
  geom_sf(aes(size = price), alpha = 0.7) +
  labs(
    size = "Price in Thousands"
  ) +
   theme(
    axis.text.x = element_blank(),   # Remove x-axis text
    axis.text.y = element_blank()    # Remove y-axis text
  )
```

# Function to plot Shoreview data. 

```{r}
plot_this_shoreview <- function(data, rentBuy, size_variable, color_variable){
  data_small <- data %>%
    drop_na(c(.data[[size_variable,]], .data[[color_variable]])) 
  # issues with NA if variable selected for color or size are missing. 

  addresses <- data %>%
    drop_na() %>%
    select(address)

  register_google(key = "AIzaSyA-CZDgJkk_zG_ULCoS-PosYIQF_ZzwQPs")

  coords <- geocode(addresses$address)

  data_coords <- bind_cols(data_small, coords)

  data_coords <- bind_cols(data_small, coords) %>%
    st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
    st_transform(3857) %>%
    filter(status == rentBuy & !is.na(.[[size_variable]]) & !is.na(.[[color_variable]])) # special filtering required, drop_na() is not enough on its own. 

  map <- data_coords %>%
    filter(status == rentBuy) %>%
    ggplot() +
    annotation_map_tile(type = "osm", zoomin = 0, progress = "none") +
    geom_sf(aes(size = .data[[size_variable]], color = .data[[color_variable]]), alpha = 0.7) + # .data refers to the current data set in the pipeline
    labs(
      size = size_variable,
      color = color_variable,
      title = paste("Shoreview, Mn - ", rentBuy) # dynamically label title
    ) +
    theme(
      axis.text.x = element_blank(),   # removes long and lat from axes
      axis.text.y = element_blank()    
    )
  return(map)
}
```

```{r}
plot_this_shoreview(shoreview_full, "buy", "bathrooms", "bedrooms")
```

